package hudson.scm;

import hudson.model.AbstractBuild;
import hudson.model.Run;
import hudson.scm.ChangeLogSet.Entry;

import java.io.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class SurroundSCMChangeLogParser extends ChangeLogParser {

  /**
   * Standard format for a cruisecontrol output is:
   * {@code <Mainline/Repository/Path/To/File><Filename.txt><21><Check in><20161103144114><Comment for the action><LastName, FirstName><email@address.com> }
   */
  private Pattern changeRegex = null;
  private final static String CC_LINE_PATTERN = "<(.*)><(.*)><(.*)><(.*)><(.*)><(.*)><(.*)><(.*)>";

  /**
   *  Parses the Surround SCM changelogFile, which is generated by the Surround SCM CLI's cruisecontrol command.
   * {@inheritDoc}
   */
  @Override
  public ChangeLogSet<? extends Entry> parse(Run build, RepositoryBrowser<?> browser, File changelogFile) {
    //open the changelog File
    SurroundSCMChangeLogSet cls = new SurroundSCMChangeLogSet(build, browser);
    changeRegex = Pattern.compile(CC_LINE_PATTERN);
    commonParseChangeLog(cls, changelogFile);
    return cls;
  }

  @Override
  @Deprecated
  public ChangeLogSet<? extends Entry> parse(AbstractBuild build,
                                             File changelogFile) {
    //open the changelog File
    SurroundSCMChangeLogSet cls = new SurroundSCMChangeLogSet(build);
    changeRegex = Pattern.compile(CC_LINE_PATTERN);
    commonParseChangeLog(cls, changelogFile);

    return cls;
  }

  public void commonParseChangeLog(SurroundSCMChangeLogSet cls, File changelogFile) {
    String line;
    BufferedReader br = null;

    InputStreamReader is = null;
    try{
      is = new InputStreamReader(new FileInputStream(changelogFile), "UTF-8");

      br = new BufferedReader(is);
      while ((line = br.readLine())!=null)
      {
        SurroundSCMChangeLogSet.SurroundSCMChangeLogSetEntry entry = parseCCLine(cls, line);
        if(entry != null)
        {
          cls.addEntry(entry);
        }
      }

    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      if(br != null) {
        try {
          br.close();
        } catch (IOException e) {
          e.printStackTrace();
        }
      }
    }
  }

    /**
     * Parses a 'CruiseControl' formatted line from the Surround SCM CLI's "CruiseControl" command.
     * ex: {@code <Mainline/Repository/Path/To/File><Filename.txt><21><Check in><20161103144114><Comment for the action><LastName, FirstName><email@address.com> }
     * @param cls               SurroundSCMChangeLogSet this entry will be added to.
     * @param cruiseControlLine Line to parse
     * @return  Returns a new {@link hudson.scm.SurroundSCMChangeLogSet.SurroundSCMChangeLogSetEntry} created based on the
     *          passed in line.
     */
  public SurroundSCMChangeLogSet.SurroundSCMChangeLogSetEntry parseCCLine(SurroundSCMChangeLogSet cls, String cruiseControlLine ) {
    Matcher changeMatcher = changeRegex.matcher(cruiseControlLine);

    if(changeMatcher.find() && changeMatcher.groupCount() == 8) {
      String repository = changeMatcher.group(1);
      String filename = changeMatcher.group(2);
      String version = changeMatcher.group(3);
      String action = changeMatcher.group(4);
      String date = changeMatcher.group(5);
      String comment = changeMatcher.group(6);
      String username = changeMatcher.group(7);
      String email = changeMatcher.group(8);

      return new SurroundSCMChangeLogSet.SurroundSCMChangeLogSetEntry(repository.concat("/").concat(filename), comment, version, action, date, cls, username, email);
    }
    return null;
  }
}


